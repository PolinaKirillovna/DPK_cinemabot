import asyncio
import os
import sqlite3
from datetime import datetime

import aiohttp
from serpapi import GoogleSearch
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from dotenv import load_dotenv

load_dotenv()

bot_token = os.getenv('BOT_TOKEN')
omdb_api_key = os.getenv('OMDB_API_KEY')
kinopoisk_api_key = os.getenv('KINOPOISK_API_KEY')
rapid_api_key = os.getenv('RAPID_API_KEY')
google_custom_search_api_key = os.getenv('GCS_API_KEY')
custom_search_engine_id = os.getenv('CUSTOM_SEARCH_ENGINE_ID')
serpapi_key = os.getenv('SERPAPI_KEY')

conn = sqlite3.connect('data/bot.db')
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS search_history (
        user_id INTEGER,
        film_title TEXT,
        search_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS stats (
        user_id INTEGER,
        film_title TEXT,
        count INTEGER DEFAULT 1
    )
""")

bot = Bot(token=bot_token)
dp = Dispatcher()


async def search_google(query):
    params = {
        "q": query,
        "location": "Russia",
        "hl": "ru",
        "gl": "ru",
        "google_domain": "google.ru",
        "api_key": serpapi_key
    }

    search = GoogleSearch(params)
    results = search.get_dict()
    return results['organic_results'][:3]


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("""
–ü—Ä–∏–≤–µ—Ç!

üé¨–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ñ–∏–ª—å–º–∞, \
—Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.

‚úâÔ∏è–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –Ω–µ –±–æ–π—Å—è –æ–ø–µ—á–∞—Ç–æ–∫ - –±–æ—Ç —Å –Ω–∏–º–∏ —Å–ø—Ä–∞–≤–∏—Ç—Å—è.

üá∑üá∫/ üá∫üá∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥—å –±–¥–∏—Ç–µ–ª–µ–Ω: –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏–ª–∏ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ - \
–±–æ—Ç –≤—ã–¥–∞—Å—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (—Ç–∞–∫–∏—Ö –∫–∞–∫ prime, hbo –∏–ª–∏ netflix). \
–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∏–Ω–æ —Ç–∞–º –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, \
–≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ ü§´

–ù–∞ —á—Ç–æ –µ—â–µ –æ–Ω —Å–ø–æ—Å–æ–±–µ–Ω:
üìù –í—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ /history
üìä–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ /stats

–ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—ã –ø–æ–ª—É—á–∏—à—å:
‚Äî –ü–æ—Å—Ç–µ—Ä
‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ
‚Äî –†–µ–π—Ç–∏–Ω–≥
‚Äî –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞
‚Äî –ñ–∞–Ω—Ä—ã
‚Äî –°—é–∂–µ—Ç
    """)


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer("""
üé¨Ô∏èÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –Ω–µ –±–æ–π—Å—è –æ–ø–µ—á–∞—Ç–æ–∫ - –±–æ—Ç —Å –Ω–∏–º–∏ —Å–ø—Ä–∞–≤–∏—Ç—Å—è.

üá∑üá∫/üá∫üá∏–ü–ª–∞—Ç–Ω–æ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥—å –±–¥–∏—Ç–µ–ª–µ–Ω: –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏–ª–∏ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ - \
–±–æ—Ç –≤—ã–¥–∞—Å—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (—Ç–∞–∫–∏—Ö –∫–∞–∫ prime, hbo –∏–ª–∏ netflix). \
–ö–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∏–Ω–æ —Ç–∞–º –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ –≤—ã –∏—â–µ—Ç–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, \
–≤–≤–æ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ ü§´

‚öôÔ∏è–ö–æ–º–∞–Ω–¥—ã
/start - –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
/help - –ø–æ–º–æ—â—å
/history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
/clear - –æ—á–∏—â–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

‚ÅâÔ∏è–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?
–ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @maki_who
""")


@dp.message(Command('history'))
async def cmd_history(message: types.Message):
    cursor.execute("SELECT film_title, search_time FROM search_history WHERE user_id = ? ORDER BY search_time DESC",
                   (message.from_user.id,))
    history = cursor.fetchall()
    if not history:
        await message.reply("üóëÔ∏è–ò—Å—Ç–æ—Ä–∏–∏ –Ω–µ—Ç!\n–°–∫–æ—Ä–µ–µ –≤–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–ª–Ω–∏ —ç—Ç—É –ø—É—Å—Ç–æ—Ç—É!")
    else:
        response = "*–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:* \n\n"
        for film_title, search_time in history:
            dt = datetime.strptime(search_time, "%Y-%m-%d %H:%M:%S")
            response += f"üóìÔ∏è {dt.strftime('%d.%m.%Y')} ‚è∞ {dt.strftime('%H:%M')} üé¨{film_title}\n"
        await message.reply(response, parse_mode='Markdown')


@dp.message(Command('stats'))
async def cmd_stats(message: types.Message):
    cursor.execute("SELECT film_title, count FROM stats WHERE user_id = ? ORDER BY count DESC", (message.from_user.id,))
    stats = cursor.fetchall()
    if not stats:
        await message.reply("üóëÔ∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç!\n–°–∫–æ—Ä–µ–µ –≤–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –∑–∞–ø–æ–ª–Ω–∏ —ç—Ç—É –ø—É—Å—Ç–æ—Ç—É!")
    else:
        response = "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        for film_title, count in stats:
            response += f"üçø {film_title}: *{count}*\n"
        await message.reply(response, parse_mode='Markdown')


@dp.message(Command('clear'))
async def clear(message: types.Message):
    cursor.execute("DELETE FROM search_history WHERE user_id = ?", (message.from_user.id,))
    cursor.execute("DELETE FROM stats WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    await message.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã")


@dp.message()
async def echo(message: types.Message):
    film_title = message.text
    cursor.execute("INSERT INTO search_history (user_id, film_title) VALUES (?, ?)", (message.from_user.id, film_title))
    conn.commit()
    cursor.execute("SELECT count FROM stats WHERE user_id = ? AND film_title = ?", (message.from_user.id, film_title))
    result = cursor.fetchone()
    if result is None:
        cursor.execute("INSERT INTO stats (user_id, film_title) VALUES (?, ?)", (message.from_user.id, film_title))
    else:
        cursor.execute("UPDATE stats SET count = count + 1 WHERE user_id = ? AND film_title = ?",
                       (message.from_user.id, film_title))
    conn.commit()

    async with aiohttp.ClientSession() as session:
        params = {'apikey': omdb_api_key, 't': film_title}
        async with session.get('http://www.omdbapi.com/', params=params) as resp:
            film_data = await resp.json()
            if film_data['Response'] == 'False':
                headers = {"X-API-KEY": kinopoisk_api_key}
                params = {'query': film_title}
                async with session.get('https://api.kinopoisk.dev/v1.4/movie/search', headers=headers,
                                       params=params) as resp_kinopoisk:
                    kinopoisk_data = await resp_kinopoisk.json()
                    if not kinopoisk_data['docs']:
                        await message.reply("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return

                    film_data_kinopoisk = kinopoisk_data['docs'][0]
                    await bot.send_photo(chat_id=message.chat.id, photo=film_data_kinopoisk['poster']['url'])

                    genres = [genre['name'] for genre in film_data_kinopoisk['genres']]

                    response_text = f"*–ù–∞–∑–≤–∞–Ω–∏–µ*: {film_data_kinopoisk['name']}\n"\
                                    f"*–ì–æ–¥*: {film_data_kinopoisk['year']}\n"\
                                    f"*–ñ–∞–Ω—Ä—ã*: {', '.join(genres)}\n" \
                                    f"*–†–µ–π—Ç–∏–Ω–≥ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞*: {film_data_kinopoisk['rating']['kp']}\n\n" \
                                    f"\n*–°—é–∂–µ—Ç*: {film_data_kinopoisk['description']}\n\n" \
                                    f"üçø *–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?*  \n"

                    links = await search_google(f"{film_title} —Å–º–æ—Ç—Ä–µ—Ç—å –æ–Ω–ª–∞–π–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ")

                    for link in links:
                        redirect_link = link['redirect_link']
                        if redirect_link.startswith('https://www.google.ruhttps://'):
                            redirect_link = redirect_link.replace('https://www.google.ru', '', 1)
                        response_text += f"[–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ {link['source']}]({redirect_link})\n"

                    response_text += "\n\n‚ùóÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è‚ò†Ô∏èüí∏*–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã?*\n" \
                                     "–ò–Ω–æ–≥–¥–∞ —Ç–∞–∫–æ–µ —Å–ª—É—á–∞–µ—Ç—Å—è (—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –Ω–∞ –ø–∏—Ä–∞—Ç—Å–∫–∏—Ö —Å–∞–π—Ç–∞—Ö –ø–ª–æ—Ö–æ, " \
                                     "–Ω–æ –∏–º–µ–Ω–Ω–æ –Ω–∞ –Ω–∏—Ö –º—ã –∏ –¥–∞–µ–º –≤–∞–º —Å—Å—ã–ª–∫–∏ –≤ –†–æ—Å—Å–∏–∏ –∏–∑-–∑–∞ —Å–∞–Ω–∫—Ü–∏–π). " \
                                     "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å VPN –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç –∂–µ \
                                     —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, " \
                                     "–¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –µ—â–µ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å–º–∞" \
                                     "(—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∏–∂–µ üëá)\n\n" \
                                     f"*Title:* {film_data_kinopoisk['alternativeName']}"

                    await bot.send_message(chat_id=message.chat.id, text=response_text, parse_mode='Markdown')
                    return

            headers = {
                'x-rapidapi-host': "streaming-availability.p.rapidapi.com",
                'x-rapidapi-key': rapid_api_key
            }

            await bot.send_photo(chat_id=message.chat.id, photo=film_data['Poster'])
            querystring = {"imdb_id": film_data['imdbID']}
            url = "https://streaming-availability.p.rapidapi.com/get"

            async with session.get(url, headers=headers, params=querystring) as resp_stream:
                stream_data = await resp_stream.json()
                if 'result' in stream_data and 'streamingInfo' in stream_data['result'] and 'us' in \
                        stream_data['result']['streamingInfo']:
                    streaming_links_set = set()
                    for stream_info in stream_data['result']['streamingInfo']['us']:
                        streaming_links_set.add(f"[Watch it on: {stream_info['service']}]({stream_info['link']})")
                    streaming_links = "\n".join(list(streaming_links_set)[:min(3, len(streaming_links_set))])
                else:
                    streaming_links = "No streaming information available"

            genres = [genre['name'] for genre in stream_data['result']['genres']]
            response_text = f"*Title:* {stream_data['result']['title']}\n*Year:* {film_data['Year']}\n" \
                            f"*Genres:* {', '.join(genres)}\n" \
                            f"*Rating:* {film_data['imdbRating']}\n" \
                            f"\n*Plot:* {film_data['Plot']}\n" \
                            f"\n\nüçø *Where to watch?*\n{streaming_links}" \
                            "\n\n‚ùóÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è‚ò†Ô∏è*For free version*\n" \
                            "We strongly discourage you from promoting piracy and watching movies for free," \
                            "but we can't forbid it. To get the desired free links, " \
                            "send another request to the bot with the title of the movie in Russian."
            await bot.send_message(chat_id=message.chat.id, text=response_text, parse_mode='Markdown')


@dp.shutdown()
async def shutdown():
    cursor.close()
    conn.close()


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())